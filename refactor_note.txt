Step 0:

更動: 幫 gilded_rose.py line by line 的寫註解。
原因: 確保自己有理解每一段在做什麼，以及它預期的行為。
參考: 無

Step 1:

更動: 把 Sulfuras 的物品判斷邏輯獨立出來，移到最前面
原因: Sulfuras 的判斷在原程式碼中重複數次
參考:
    - DRY(Don't Repeat Yourself): https://shawnlin0201.github.io/Methodology/Methodology-001-DRY-principle/
    - Return Early: https://medium.com/swlh/return-early-pattern-3d18a41bba8

Step 2:

更動: 把 sell_in 和 quality 的更新邏輯從 updateQuality 中獨立出來
原因: 原本 updateQuality 混雜了兩種東西(sell_in, quality)的更新邏輯，造成可讀性降低
參考: 
    - 單一職責原則(SRP, Single Responsibility Principle): https://igouist.github.io/post/2020/10/oo-10-single-responsibility-principle/
    - 關注點分離: https://zh.wikipedia.org/zh-tw/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB

Step 3:

更動: 盡可能消除巢狀的 if-else 區塊
原因: 過多的巢狀區塊會導致可讀性的降低，過多的條件堆疊再一起甚至可能造成誤讀或誤解
參考:
    - Arrow Anti-Pattern: https://wiki.c2.com/?ArrowAntiPattern
    - Pyramid of the doom: https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)
    - 迴圈複雜度(Cyclomatic complexity): https://zh.wikipedia.org/zh-tw/%E5%BE%AA%E7%92%B0%E8%A4%87%E9%9B%9C%E5%BA%A6

Step 4:

更動: 將每一種物品的算法邏輯獨立成個別的函式
原因: 增加未來擴展性，並且可以強化職責的概念
參考:
    - 開放–封閉原則(OCP, Open/Closed Principle): https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle
    - KISS(Keep It Simple, Stupid): https://shawnlin0201.github.io/Methodology/Methodology-002-Kiss-principle/
    - 得墨忒耳定律(Law of Demeter): https://en.wikipedia.org/wiki/Law_of_Demeter
    - 單一職責原則(SRP, Single Responsibility Principle): https://igouist.github.io/post/2020/10/oo-10-single-responsibility-principle/
    - 關注點分離: https://zh.wikipedia.org/zh-tw/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB

Step 5:

更動: 調整程式碼架構及內容，利用類別來管理各物品的多種邏輯
原因: 再次強化職責，不讓更新品質用的函式負責判斷物品類別，同時降低重複性程式碼片段的出現。
參考:
    - 單一職責原則(SRP, Single Responsibility Principle): https://igouist.github.io/post/2020/10/oo-10-single-responsibility-principle/
    - 關注點分離: https://zh.wikipedia.org/zh-tw/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB
    - DRY(Don't Repeat Yourself): https://shawnlin0201.github.io/Methodology/Methodology-001-DRY-principle/
